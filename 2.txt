Deployment Descriptor is XML file used by web container to define servlets match up with which URLs. It will also specify the landing page for the root of the application

javax.servlet ===> package that contains the interfaces and the classes required for implementing the Servlet

javax.servlet.http ===> package that contains interfaces and the class required to handle the HTTP request and response

Ways to Create a Servlet:
Create a normal java, and then:

1. implements Servlet interface: parent interface of any Servlet class

2. extends GenericServlet class: abstract class that implements the Servlet interface. Only one method is declared abstract in this class and that is service() method

3. extends HttpServlet class: this class contains the method for handling each HTTP request separately 
eg. for post request it has doPost() method
for get request it has doGet() method

Here first the request will come to service() method and the request will be transferred based on the type of the request to the different methods.

In order to request the Servlet we need to map the Servlet class with the some URL using so that the web container can send the request to the requested servlet:

1. web.xml ===> create a deploment descriptor file and do the URL mapping

2. annotation ===> @WebServlet above the Servlet class definition

------------------------------------------------
Life Cycle of the Servlet

1. Load servlet class ===> load the class file of the servlet in the web container
2. Create Servlet class instance ===> Web container will create the instance/object of the servlet class, only one object of the servlet will be created
3. Call init() method ===> web container will call the init() method defined in the servlet class, this method is called only once.
4. Call service() method ===> web container will call the service() method only when someone requests for the servlet. This method will be called for every request on the servlet. This method will contain the code for the response generation.
5. Call destroy() method ===> web container will call destroy() method when the instance/object of the servlet class is destroyed.

----------------------------------------------
HTTP Get and Post, difference

HTTP GET

1. Length restriction ===> limited
2. Retrieve the data from the URL (header part of the URL)
3. Visible to everyone
4. Not secure
5. Can be bookmarked

HTTP POST

1. No restriction on the length
2. Retrieve the data from the request body
3. Since the data is part of request body, data is not visible to everyone
4. More secure and is encrepted
5. Cannot be bookmarked

--------------------------------------------------
If we want to move to control from one servlet to another:

1. forward() of RequestDispatcher

The request of the current servlet is dispatched to another servlet specified. This transition is happening inside the server, the client ie. hence browser is not aware about this transition and will not update the URL accordingly

2. include() of RequestDispatcher

The response of the another servlet in included within the first servlet request. Here the final response is generated by the first servlet

3. sendRedirect of HttpServletResponse

The control will move from one servlet to another servlet specified. Here the transition will not happen within the server instead the client will issue a new request for the second servlet, hence the client is aware about the transition and will update the URL accordingly. But here the request of the first servlet is not send to the second servlet

-----------------------------------------------------
ServletConfig

Is an interface whose instance is created by the web container for each servlet. For every servlet, only one ServletConfig instance is created and is passed as the parameter to the init() method

This object contains initail parameter passed by the web container to the Servlet during initialization

Scope of this instance is restricted to the Servlet for which it is defined

-----------------------------------------------------
ServletContext

Is an interface whose instance is created by the web container. Only one instance is created for the entire application (project). This instance is accessible to all the servlets and JSP of the project. 

We can initial the parameters in this object using web.xml or add the parameters in the servlet execution 

-----------------------------------------------------
Scope of the data in the servlet
1. ServletConfig: accessible only in the single servlet
2. HttpServletRequest: accessible in two servlets between which the request is transferred
3. HttpSession:
4. ServletContext: accessible to the entire application means to all the Servlet & JSP of the application